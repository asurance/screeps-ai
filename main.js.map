{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/baseCreep.ts","webpack:///./src/carrier.ts","webpack:///./src/index.ts","webpack:///./src/walker.ts","webpack:///./src/worker.ts"],"names":[],"mappings":";QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;;AClFA;AAAA;AAAA;AAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA,KAAK;AACL;;;;;;;;;;;;;ACdA;AAAA;AAAA;AAAA;AACgD;AACzC;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,aAAa,GAAG,WAAW;AACvD,iEAAiE,aAAa,GAAG,WAAW;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,mBAAmB,oEAAiB;AACpC;;;;;;;;;;;;;AChFA;AAAA;AAAA;AAAA;AAAoC;AACF;AACA;AAClC;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,8CAAM;AAClB,YAAY,8CAAM;AAClB,aAAa,gDAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,8CAAM;AACjE,+BAA+B,8CAAM;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,gDAAO;AAClE,gCAAgC,gDAAO;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,8CAAM;AACjE,+BAA+B,8CAAM;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACtEA;AAAA;AAAA;AAAA;AACgD;AACzC;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,YAAY,GAAG,UAAU;AACrD,yDAAyD,YAAY,GAAG,UAAU;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,mBAAmB,oEAAiB;AACpC;;;;;;;;;;;;;ACpCA;AAAA;AAAA;AAAA;AACgD;AACzC;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,YAAY,GAAG,UAAU;AACrD,iEAAiE,YAAY,GAAG,UAAU;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,mBAAmB,oEAAiB;AACpC","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/index.ts\");\n","export const EnergyMap = {\n    move: 50,\n    work: 100,\n    carry: 50,\n    attack: 80,\n    ranged_attack: 150,\n    heal: 250,\n    claim: 600,\n    tough: 10\n};\nexport function GetRequiredEnergy(body) {\n    return body.reduce((pre, cur) => {\n        return pre + EnergyMap[cur];\n    }, 0);\n}\n","var _a;\nimport { GetRequiredEnergy } from './baseCreep';\nexport const Carrier = (_a = class Carrier {\n        static serialize() {\n            return this.id;\n        }\n        static deserialize(data) {\n            this.id = data;\n        }\n        create(spawn) {\n            const name = `${Carrier.type}-${Carrier.id}`;\n            const result = spawn.spawnCreep(['work', 'move'], `${Carrier.type}-${Carrier.id}`);\n            if (result === OK) {\n                Carrier.id++;\n                this.creep = Game.creeps[name];\n                this.creep.memory = {\n                    type: \"carrier\" /* Carrier */,\n                    pickup: true,\n                    targetId: null\n                };\n            }\n            return result;\n        }\n        ticker() {\n            const memory = this.creep.memory;\n            if (memory.pickup) {\n                if (this.creep.store.getFreeCapacity('energy') > 0) {\n                    if (memory.targetId === null) {\n                        const target = this.creep.pos.findClosestByPath(FIND_DROPPED_RESOURCES);\n                        if (target) {\n                            memory.targetId = target.id;\n                        }\n                    }\n                    if (memory.targetId !== null) {\n                        this.creep.say('寻找资源');\n                        const target = Game.getObjectById(memory.targetId);\n                        if (this.creep.pickup(target) === ERR_NOT_IN_RANGE) {\n                            this.creep.moveTo(target);\n                        }\n                    }\n                    else {\n                        memory.pickup = false;\n                        memory.targetId = null;\n                    }\n                }\n                else {\n                    memory.pickup = false;\n                    memory.targetId = null;\n                }\n            }\n            else {\n                if (this.creep.store.getUsedCapacity('energy') > 0) {\n                    if (memory.targetId === null) {\n                        const target = this.creep.pos.findClosestByPath(FIND_MY_SPAWNS);\n                        if (target) {\n                            memory.targetId = target.id;\n                        }\n                    }\n                    if (memory.targetId !== null) {\n                        this.creep.say('放置资源');\n                        const target = Game.getObjectById(memory.targetId);\n                        if (this.creep.transfer(target, 'energy') === ERR_NOT_IN_RANGE) {\n                            this.creep.moveTo(target);\n                        }\n                    }\n                    else {\n                        memory.pickup = true;\n                        memory.targetId = null;\n                    }\n                }\n                else {\n                    memory.pickup = true;\n                    memory.targetId = null;\n                }\n            }\n        }\n    },\n    _a.id = 0,\n    _a.type = \"carrier\" /* Carrier */,\n    _a.minEnergy = GetRequiredEnergy(['carry', 'move']),\n    _a);\n","import { Carrier } from './carrier';\nimport { Walker } from './walker';\nimport { Worker } from './worker';\nfor (const key in Memory.creeps) {\n    if (!(key in Game.creeps)) {\n        delete Memory.creeps[key];\n    }\n}\nconst creepCtorMap = {\n    worker: Worker,\n    walker: Walker,\n    carrier: Carrier,\n};\nfor (const key in creepCtorMap) {\n    const ctor = creepCtorMap[key];\n    ctor.deserialize(Memory.ctors[key]);\n}\nconst creepMap = new Map();\nfor (const creepName in Game.creeps) {\n    const creep = Game.creeps[creepName];\n    const type = creep.memory.type;\n    const handler = new creepCtorMap[type]();\n    handler.creep = creep;\n    if (creepMap.has(type)) {\n        creepMap.get(type).push(handler);\n    }\n    else {\n        creepMap.set(type, [handler]);\n    }\n}\nfor (const spawnName in Game.spawns) {\n    const span = Game.spawns[spawnName];\n    const workerList = creepMap.get(\"worker\" /* Worker */);\n    if (!workerList) {\n        if (!span.spawning && span.room.energyAvailable >= Worker.minEnergy) {\n            const worker = new Worker();\n            const result = worker.create(span, span.room.energyAvailable);\n            if (result !== OK) {\n                console.log(result);\n                break;\n            }\n        }\n    }\n    const carrierList = creepMap.get(\"carrier\" /* Carrier */);\n    if (!carrierList) {\n        if (!span.spawning && span.room.energyAvailable >= Carrier.minEnergy) {\n            const carrier = new Carrier();\n            const result = carrier.create(span, span.room.energyAvailable);\n            if (result !== OK) {\n                console.log(result);\n                break;\n            }\n        }\n    }\n    const walkerList = creepMap.get(\"walker\" /* Walker */);\n    if (!walkerList) {\n        if (!span.spawning && span.room.energyAvailable >= Walker.minEnergy) {\n            const walker = new Walker();\n            const result = walker.create(span, span.room.energyAvailable);\n            if (result !== OK) {\n                console.log(result);\n                break;\n            }\n        }\n    }\n}\ncreepMap.forEach(creeps => creeps.forEach(creep => creep.ticker()));\nfor (const key in creepCtorMap) {\n    const ctor = creepCtorMap[key];\n    Memory.ctors[key] = ctor.serialize();\n}\n","var _a;\nimport { GetRequiredEnergy } from './baseCreep';\nexport const Walker = (_a = class Walker {\n        static serialize() {\n            return this.id;\n        }\n        static deserialize(data) {\n            this.id = data;\n        }\n        create(spawn) {\n            const name = `${Walker.type}-${Walker.id}`;\n            const result = spawn.spawnCreep(['move'], `${Walker.type}-${Walker.id}`);\n            if (result === OK) {\n                Walker.id++;\n                this.creep = Game.creeps[name];\n                this.creep.memory = {\n                    type: \"walker\" /* Walker */,\n                    direction: 1 + Math.floor(Math.random() * 8),\n                    restTick: 60,\n                };\n            }\n            return result;\n        }\n        ticker() {\n            const memory = this.creep.memory;\n            memory.restTick--;\n            if (memory.restTick < 0) {\n                memory.restTick = 60;\n                memory.direction = 1 + Math.floor(Math.random() * 8);\n            }\n            this.creep.move(memory.direction);\n        }\n    },\n    _a.id = 0,\n    _a.type = \"walker\" /* Walker */,\n    _a.minEnergy = GetRequiredEnergy(['move']),\n    _a);\n","var _a;\nimport { GetRequiredEnergy } from './baseCreep';\nexport const Worker = (_a = class Worker {\n        static serialize() {\n            return this.id;\n        }\n        static deserialize(data) {\n            this.id = data;\n        }\n        create(spawn) {\n            const name = `${Worker.type}-${Worker.id}`;\n            const result = spawn.spawnCreep(['work', 'move'], `${Worker.type}-${Worker.id}`);\n            if (result === OK) {\n                Worker.id++;\n                this.creep = Game.creeps[name];\n                this.creep.memory = {\n                    type: \"worker\" /* Worker */,\n                    targetId: null,\n                };\n            }\n            return result;\n        }\n        ticker() {\n            const memory = this.creep.memory;\n            if (memory.targetId === null) {\n                const target = this.creep.pos.findClosestByPath(FIND_SOURCES);\n                if (target) {\n                    memory.targetId = target.id;\n                }\n            }\n            if (memory.targetId !== null) {\n                this.creep.say('采矿中');\n                const target = Game.getObjectById(memory.targetId);\n                if (this.creep.harvest(target) === ERR_NOT_IN_RANGE) {\n                    this.creep.moveTo(target);\n                }\n            }\n        }\n    },\n    _a.id = 0,\n    _a.type = \"worker\" /* Worker */,\n    _a.minEnergy = GetRequiredEnergy(['work', 'move']),\n    _a);\n"],"sourceRoot":""}