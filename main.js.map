{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/build.ts","webpack:///./src/builderController.ts","webpack:///./src/creepController.ts","webpack:///./src/harvest.ts","webpack:///./src/harvesterController.ts","webpack:///./src/index.ts","webpack:///./src/patch.ts","webpack:///./src/repair.ts","webpack:///./src/repairerController.ts","webpack:///./src/transfer.ts","webpack:///./src/upgrade.ts","webpack:///./src/upgraderController.ts","webpack:///./src/util.ts"],"names":[],"mappings":";QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;;AClFA;AAAA;AAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC9BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiE;AACjC;AACI;AACD;AAC5B;AACP;AACA,eAAe,0EAAiB;AAChC;AACA;AACA,mEAAmE,0DAAS;AAC5E;AACA,0BAA0B,uDAAS;AACnC;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,oDAAK;AACxB;AACA;AACA,mBAAmB,wDAAO;AAC1B;AACA,KAAK;AACL;;;;;;;;;;;;;AC9CA;AAAA;AAAA;AAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA,KAAK;AACL;;;;;;;;;;;;;ACdA;AAAA;AAAA;AAA4C;AACrC;AACP;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,gEAAkB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACxBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiE;AAC7B;AACE;AACH;AAC5B;AACP;AACA,eAAe,0EAAiB;AAChC;AACA;AACA,mEAAmE,0DAAS;AAC5E;AACA,0BAA0B,uDAAS;AACnC;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,0DAAQ;AAC3B;AACA;AACA,mBAAmB,wDAAO;AAC1B;AACA,KAAK;AACL;;;;;;;;;;;;;AC9CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA4D;AACF;AACF;AACA;AACZ;AAC3B;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,wEAAmB;AAClC,cAAc,sEAAkB;AAChC,aAAa,oEAAiB;AAC9B,cAAc,oEAAgB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iBAAiB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,mBAAmB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,eAAe,gEAAkB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,WAAW,GAAG,UAAU;AAChD;AACA;AACA;AACA;AACA;AACA,6CAA6C,SAAS,GAAG,KAAK,GAAG,OAAO;AACxE;AACA;AACA;;;;;;;;;;;;;AC1Ea;AACb;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACNA;AAAA;AAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AClCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiE;AAC7B;AACD;AACD;AAC3B;AACP;AACA,eAAe,0EAAiB;AAChC;AACA;AACA,mEAAmE,0DAAS;AAC5E;AACA,0BAA0B,uDAAS;AACnC;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,sDAAM;AACzB;AACA;AACA,mBAAmB,wDAAO;AAC1B;AACA,KAAK;AACL;;;;;;;;;;;;;ACzDA;AAAA;AAAA;AAA4C;AACrC;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,iBAAiB,gEAAkB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC/BA;AAAA;AAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiE;AAC7B;AACA;AACD;AAC5B;AACP;AACA,eAAe,0EAAiB;AAChC;AACA;AACA,mEAAmE,0DAAS;AAC5E;AACA,0BAA0B,uDAAS;AACnC;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,wDAAO;AAC1B;AACA;AACA,mBAAmB,wDAAO;AAC1B;AACA,KAAK;AACL;;;;;;;;;;;;;AC7CA;AAAA;AAAA;AAAO;AACP;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/index.ts\");\n","export function Build(creep) {\n    let target = null;\n    if (creep.memory.buildId) {\n        target = Game.getObjectById(creep.memory.buildId);\n    }\n    if (target === null) {\n        const source = creep.room.find(FIND_CONSTRUCTION_SITES);\n        if (source.length > 0) {\n            target = source.reduce((pre, cur) => {\n                if ((pre.progress + 1) / pre.progressTotal < (cur.progress + 1) / cur.progressTotal) {\n                    return cur;\n                }\n                else {\n                    return pre;\n                }\n            });\n            creep.memory.buildId = target.id;\n        }\n    }\n    if (target) {\n        if (creep.build(target) === ERR_NOT_IN_RANGE) {\n            creep.moveTo(target);\n        }\n        creep.say('建造中');\n        return true;\n    }\n    else {\n        creep.say('闲置中');\n        return false;\n    }\n}\n","import { EnergyMap, GetRequiredEnergy } from './creepController';\nimport { Build } from './build';\nimport { Harvest } from './harvest';\nimport { RandomInt } from './util';\nexport const BuilderController = {\n    type: \"builder\" /* Builder */,\n    minEnergy: GetRequiredEnergy(['work', 'carry', 'move']),\n    create(spawn, name, maxEnergy) {\n        const body = ['work', 'carry', 'move'];\n        const maxCount = Math.floor((maxEnergy - this.minEnergy) / EnergyMap.carry);\n        if (maxCount > 0) {\n            const count = RandomInt(maxCount + 1);\n            if (count > 0) {\n                body.splice(1, 0, ...new Array(count).fill('carry'));\n            }\n        }\n        return spawn.spawnCreep(body, name);\n    },\n    ticker(creep) {\n        var _a;\n        let building = (_a = creep.memory.building) !== null && _a !== void 0 ? _a : false;\n        if (building) {\n            if (creep.store[RESOURCE_ENERGY] === 0) {\n                building = false;\n                delete creep.memory.buildId;\n            }\n        }\n        else {\n            if (creep.store.getFreeCapacity() === 0) {\n                building = true;\n                delete creep.memory.harvestId;\n            }\n        }\n        if (building) {\n            creep.memory.building = true;\n        }\n        else {\n            delete creep.memory.building;\n        }\n        if (building) {\n            return Build(creep);\n        }\n        else {\n            return Harvest(creep);\n        }\n    },\n};\n","export const EnergyMap = {\n    move: 50,\n    work: 100,\n    carry: 50,\n    attack: 80,\n    ranged_attack: 150,\n    heal: 250,\n    claim: 600,\n    tough: 10\n};\nexport function GetRequiredEnergy(body) {\n    return body.reduce((pre, cur) => {\n        return pre + EnergyMap[cur];\n    }, 0);\n}\n","import { RandomObjectInList } from './util';\nexport function Harvest(creep) {\n    let target = null;\n    if (creep.memory.harvestId) {\n        target = Game.getObjectById(creep.memory.harvestId);\n    }\n    if (target === null) {\n        const source = creep.room.find(FIND_SOURCES);\n        target = RandomObjectInList(source);\n        if (target) {\n            creep.memory.harvestId = target.id;\n        }\n    }\n    if (target) {\n        if (creep.harvest(target) === ERR_NOT_IN_RANGE) {\n            creep.moveTo(target);\n        }\n        creep.say('采集中');\n        return true;\n    }\n    else {\n        creep.say('闲置中');\n        return false;\n    }\n}\n","import { EnergyMap, GetRequiredEnergy } from './creepController';\nimport { Harvest } from './harvest';\nimport { Transfer } from './transfer';\nimport { RandomInt } from './util';\nexport const HarvesterController = {\n    type: \"harvester\" /* Harvester */,\n    minEnergy: GetRequiredEnergy(['work', 'carry', 'move']),\n    create(spawn, name, maxEnergy) {\n        const body = ['work', 'carry', 'move'];\n        const maxCount = Math.floor((maxEnergy - this.minEnergy) / EnergyMap.carry);\n        if (maxCount > 0) {\n            const count = RandomInt(maxCount + 1);\n            if (count > 0) {\n                body.splice(1, 0, ...new Array(count).fill('carry'));\n            }\n        }\n        return spawn.spawnCreep(body, name);\n    },\n    ticker(creep) {\n        var _a;\n        let transfering = (_a = creep.memory.transfering) !== null && _a !== void 0 ? _a : false;\n        if (transfering) {\n            if (creep.store[RESOURCE_ENERGY] === 0) {\n                transfering = false;\n                delete creep.memory.transferId;\n            }\n        }\n        else {\n            if (creep.store.getFreeCapacity() === 0) {\n                transfering = true;\n                delete creep.memory.harvestId;\n            }\n        }\n        if (transfering) {\n            creep.memory.transfering = true;\n        }\n        else {\n            delete creep.memory.transfering;\n        }\n        if (transfering) {\n            return Transfer(creep);\n        }\n        else {\n            return Harvest(creep);\n        }\n    },\n};\n","import { HarvesterController } from './harvesterController';\nimport { UpgraderController } from './upgraderController';\nimport { BuilderController } from './builderController';\nimport { RepairController } from './repairerController';\nimport { RandomObjectInList } from './util';\nimport './patch';\nfor (const key in Memory.creeps) {\n    if (!(key in Game.creeps)) {\n        delete Memory.creeps[key];\n    }\n}\nconst creepControllerMap = {\n    harvester: HarvesterController,\n    upgrader: UpgraderController,\n    builder: BuilderController,\n    repairer: RepairController,\n};\nconst creepMap = new Map();\nfor (const creepName in Game.creeps) {\n    const creep = Game.creeps[creepName];\n    const list = creepMap.get(creep.memory.type);\n    if (list) {\n        list.push(creep);\n    }\n    else {\n        creepMap.set(creep.memory.type, [creep]);\n    }\n}\nlet spawning = null;\nconst spawn = Game.spawns['Home'];\nconst list = [\"harvester\" /* Harvester */, \"upgrader\" /* Upgrader */, \"builder\" /* Builder */];\nfor (let i = 0; i < list.length; i++) {\n    const l = creepMap.get(list[i]);\n    if (l) {\n        if (l.length >= 5) {\n            list.splice(i, 1);\n            i--;\n        }\n    }\n    else {\n        spawning = list[i];\n        break;\n    }\n}\nif (spawning === null && list.length > 0) {\n    creepMap.forEach((creeps, type) => {\n        let flag = true;\n        for (let i = 0; i < creeps.length; i++) {\n            flag = creepControllerMap[creeps[i].memory.type].ticker(creeps[i]) && flag;\n        }\n        if (!flag) {\n            const index = list.indexOf(type);\n            if (index >= 0) {\n                list.splice(index, 1);\n            }\n        }\n    });\n    spawning = RandomObjectInList(list);\n}\nelse {\n    creepMap.forEach(creeps => creeps.forEach(creep => creepControllerMap[creep.memory.type].ticker(creep)));\n}\nif (spawning !== null) {\n    const controller = creepControllerMap[spawning];\n    if (spawn.room.energyAvailable >= controller.minEnergy) {\n        const name = `${spawn.name}-${Game.time}`;\n        const result = controller.create(spawn, name, spawn.room.energyAvailable);\n        if (result === OK) {\n            Game.creeps[name].memory.type = controller.type;\n        }\n        else {\n            Game.notify(`spawn object fail:${spawning} ${name} ${result}`, 60);\n        }\n    }\n}\n","\"use strict\";\nGame.killAllCreeps = () => {\n    for (const name in Game.creeps) {\n        Game.creeps[name].suicide();\n        delete Memory.creeps[name];\n    }\n};\n","export function Repair(creep) {\n    let target = null;\n    if (creep.memory.repairId) {\n        target = Game.getObjectById(creep.memory.repairId);\n    }\n    if (target === null) {\n        const source = creep.room.find(FIND_STRUCTURES, {\n            filter: (structure) => {\n                return structure.hits < structure.hitsMax;\n            }\n        });\n        if (source.length > 0) {\n            target = source.reduce((pre, cur) => {\n                if (pre.hits < cur.hits) {\n                    return pre;\n                }\n                else {\n                    return cur;\n                }\n            });\n            creep.memory.repairId = target.id;\n        }\n    }\n    if (target) {\n        if (creep.repair(target) === ERR_NOT_IN_RANGE) {\n            creep.moveTo(target);\n        }\n        creep.say('维修中');\n        return true;\n    }\n    else {\n        creep.say('闲置中');\n        return false;\n    }\n}\n","import { EnergyMap, GetRequiredEnergy } from './creepController';\nimport { Harvest } from './harvest';\nimport { RandomInt } from './util';\nimport { Repair } from './repair';\nexport const RepairController = {\n    type: \"repairer\" /* Repairer */,\n    minEnergy: GetRequiredEnergy(['work', 'carry', 'move']),\n    create(spawn, name, maxEnergy) {\n        const body = ['work', 'carry', 'move'];\n        const maxCount = Math.floor((maxEnergy - this.minEnergy) / EnergyMap.carry);\n        if (maxCount > 0) {\n            const count = RandomInt(maxCount + 1);\n            if (count > 0) {\n                body.splice(1, 0, ...new Array(count).fill('carry'));\n            }\n        }\n        return spawn.spawnCreep(body, name);\n    },\n    ticker(creep) {\n        var _a, _b;\n        let repairing = (_a = creep.memory.repairing) !== null && _a !== void 0 ? _a : false;\n        if (repairing) {\n            if (creep.store[RESOURCE_ENERGY] === 0) {\n                repairing = false;\n                delete creep.memory.repairId;\n                delete creep.memory.repairTick;\n            }\n            else {\n                const tick = ((_b = creep.memory.repairTick) !== null && _b !== void 0 ? _b : 300) - 1;\n                if (tick <= 0) {\n                    delete creep.memory.repairId;\n                    delete creep.memory.repairTick;\n                }\n                else {\n                    creep.memory.repairTick = tick;\n                }\n            }\n        }\n        else {\n            if (creep.store.getFreeCapacity() === 0) {\n                repairing = true;\n                delete creep.memory.harvestId;\n            }\n        }\n        if (repairing) {\n            creep.memory.repairing = true;\n        }\n        else {\n            delete creep.memory.repairing;\n        }\n        if (repairing) {\n            return Repair(creep);\n        }\n        else {\n            return Harvest(creep);\n        }\n    },\n};\n","import { RandomObjectInList } from './util';\nexport function Transfer(creep) {\n    let target = null;\n    if (creep.memory.transferId) {\n        target = Game.getObjectById(creep.memory.transferId);\n    }\n    if (target === null) {\n        const source = creep.room.find(FIND_STRUCTURES, {\n            filter: (structure) => {\n                return structure.structureType === STRUCTURE_EXTENSION\n                    || structure.structureType === STRUCTURE_SPAWN\n                    || structure.structureType === STRUCTURE_TOWER\n                        && structure.store.getFreeCapacity(RESOURCE_ENERGY) > 0;\n            }\n        });\n        target = RandomObjectInList(source);\n        if (target) {\n            creep.memory.transferId = target.id;\n        }\n    }\n    if (target) {\n        if (creep.transfer(target, RESOURCE_ENERGY) === ERR_NOT_IN_RANGE) {\n            creep.moveTo(target);\n        }\n        creep.say('运输中');\n        return true;\n    }\n    else {\n        creep.say('闲置中');\n        return false;\n    }\n}\n","export function Upgrade(creep) {\n    if (creep.room.controller) {\n        if (creep.upgradeController(creep.room.controller) === ERR_NOT_IN_RANGE) {\n            creep.moveTo(creep.room.controller);\n        }\n        creep.say('升级中');\n        return true;\n    }\n    else {\n        creep.say('闲置中');\n        return false;\n    }\n}\n","import { EnergyMap, GetRequiredEnergy } from './creepController';\nimport { Harvest } from './harvest';\nimport { Upgrade } from './upgrade';\nimport { RandomInt } from './util';\nexport const UpgraderController = {\n    type: \"upgrader\" /* Upgrader */,\n    minEnergy: GetRequiredEnergy(['work', 'carry', 'move']),\n    create(spawn, name, maxEnergy) {\n        const body = ['work', 'carry', 'move'];\n        const maxCount = Math.floor((maxEnergy - this.minEnergy) / EnergyMap.carry);\n        if (maxCount > 0) {\n            const count = RandomInt(maxCount + 1);\n            if (count > 0) {\n                body.splice(1, 0, ...new Array(count).fill('carry'));\n            }\n        }\n        return spawn.spawnCreep(body, name);\n    },\n    ticker(creep) {\n        var _a;\n        let upgrading = (_a = creep.memory.upgrading) !== null && _a !== void 0 ? _a : false;\n        if (upgrading) {\n            if (creep.store[RESOURCE_ENERGY] === 0) {\n                upgrading = false;\n            }\n        }\n        else {\n            if (creep.store.getFreeCapacity() === 0) {\n                upgrading = true;\n                delete creep.memory.harvestId;\n            }\n        }\n        if (upgrading) {\n            creep.memory.upgrading = true;\n        }\n        else {\n            delete creep.memory.upgrading;\n        }\n        if (upgrading) {\n            return Upgrade(creep);\n        }\n        else {\n            return Harvest(creep);\n        }\n    },\n};\n","export function RandomInt(max, min = 0) {\n    return min + Math.floor(Math.random() * (max - min));\n}\nexport function RandomObjectInList(list) {\n    if (list.length > 0) {\n        return list[Math.floor(Math.random() * list.length)];\n    }\n    else {\n        return null;\n    }\n}\n"],"sourceRoot":""}