{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/baseCreep.ts","webpack:///./src/builder.ts","webpack:///./src/harvester.ts","webpack:///./src/index.ts","webpack:///./src/upgrader.ts"],"names":[],"mappings":";QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;;AClFA;AAAA;AAAA;AAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA,KAAK;AACL;;;;;;;;;;;;;ACdA;AAAA;AAAA;AAAA;AACgD;AACzC;AACP;AACA,4BAA4B,aAAa,GAAG,UAAU;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,mBAAmB,oEAAiB;AACpC;;;;;;;;;;;;;ACjFA;AAAA;AAAA;AAAA;AACgD;AACzC;AACP;AACA,4BAA4B,eAAe,GAAG,UAAU;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,mBAAmB,oEAAiB;AACpC;;;;;;;;;;;;;ACjEA;AAAA;AAAA;AAAA;AAAoC;AACI;AACF;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,oDAAS;AACxB,cAAc,kDAAQ;AACtB,aAAa,gDAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iBAAiB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,mBAAmB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACvEA;AAAA;AAAA;AAAA;AACgD;AACzC;AACP;AACA,4BAA4B,cAAc,GAAG,UAAU;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,mBAAmB,oEAAiB;AACpC","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/index.ts\");\n","export const EnergyMap = {\n    move: 50,\n    work: 100,\n    carry: 50,\n    attack: 80,\n    ranged_attack: 150,\n    heal: 250,\n    claim: 600,\n    tough: 10\n};\nexport function GetRequiredEnergy(body) {\n    return body.reduce((pre, cur) => {\n        return pre + EnergyMap[cur];\n    }, 0);\n}\n","var _a;\nimport { GetRequiredEnergy } from './baseCreep';\nexport const Builder = (_a = class Builder {\n        create(spawn) {\n            const name = `${Builder.type}-${Game.time}`;\n            const result = spawn.spawnCreep(['work', 'carry', 'move'], name);\n            if (result === OK) {\n                this.creep = Game.creeps[name];\n                this.creep.memory = {\n                    type: \"builder\" /* Builder */,\n                    building: false,\n                    targetId: null,\n                    buildId: null,\n                };\n            }\n            return result;\n        }\n        ticker() {\n            const creep = this.creep;\n            if (creep.memory.building) {\n                if (creep.store[RESOURCE_ENERGY] === 0) {\n                    creep.memory.building = false;\n                }\n            }\n            else {\n                if (creep.store.getFreeCapacity() === 0) {\n                    creep.memory.building = true;\n                }\n            }\n            if (creep.memory.building) {\n                let target = null;\n                if (this.creep.memory.buildId) {\n                    target = Game.getObjectById(this.creep.memory.buildId);\n                }\n                if (target === null) {\n                    const source = this.creep.room.find(FIND_CONSTRUCTION_SITES);\n                    if (source.length > 0) {\n                        target = source[Math.floor(Math.random() * source.length)];\n                        this.creep.memory.buildId = target.id;\n                    }\n                }\n                if (target) {\n                    if (this.creep.build(target) === ERR_NOT_IN_RANGE) {\n                        this.creep.moveTo(target);\n                    }\n                    this.creep.say('建造中');\n                    return true;\n                }\n                else {\n                    this.creep.say('闲置中');\n                    return false;\n                }\n            }\n            else {\n                let target = null;\n                if (this.creep.memory.targetId) {\n                    target = Game.getObjectById(this.creep.memory.targetId);\n                }\n                if (target === null) {\n                    const source = this.creep.room.find(FIND_SOURCES);\n                    if (source.length > 0) {\n                        target = source[Math.floor(Math.random() * source.length)];\n                        this.creep.memory.targetId = target.id;\n                    }\n                }\n                if (target) {\n                    if (this.creep.harvest(target) === ERR_NOT_IN_RANGE) {\n                        this.creep.moveTo(target);\n                    }\n                    this.creep.say('采矿中');\n                    return true;\n                }\n                else {\n                    this.creep.say('闲置中');\n                    return false;\n                }\n            }\n        }\n    },\n    _a.type = \"builder\" /* Builder */,\n    _a.minEnergy = GetRequiredEnergy(['work', 'carry', 'move']),\n    _a);\n","var _a;\nimport { GetRequiredEnergy } from './baseCreep';\nexport const Harvester = (_a = class Harvester {\n        create(spawn) {\n            const name = `${Harvester.type}-${Game.time}`;\n            const result = spawn.spawnCreep(['work', 'carry', 'move'], name);\n            if (result === OK) {\n                this.creep = Game.creeps[name];\n                this.creep.memory = {\n                    type: \"harvester\" /* Harvester */,\n                    targetId: null,\n                };\n            }\n            return result;\n        }\n        ticker() {\n            if (this.creep.store.getFreeCapacity() > 0) {\n                let target = null;\n                if (this.creep.memory.targetId) {\n                    target = Game.getObjectById(this.creep.memory.targetId);\n                }\n                if (target === null) {\n                    const source = this.creep.room.find(FIND_SOURCES);\n                    if (source.length > 0) {\n                        target = source[Math.floor(Math.random() * source.length)];\n                        this.creep.memory.targetId = target.id;\n                    }\n                }\n                if (target) {\n                    if (this.creep.harvest(target) === ERR_NOT_IN_RANGE) {\n                        this.creep.moveTo(target);\n                    }\n                    this.creep.say('采矿中');\n                    return true;\n                }\n                else {\n                    this.creep.say('闲置中');\n                    return false;\n                }\n            }\n            else {\n                const targets = this.creep.room.find(FIND_STRUCTURES, {\n                    filter: (structure) => {\n                        return structure.structureType === STRUCTURE_EXTENSION\n                            || structure.structureType === STRUCTURE_SPAWN\n                            || structure.structureType === STRUCTURE_TOWER\n                                && structure.store.getFreeCapacity(RESOURCE_ENERGY) > 0;\n                    }\n                });\n                if (targets.length > 0) {\n                    if (this.creep.transfer(targets[0], RESOURCE_ENERGY) === ERR_NOT_IN_RANGE) {\n                        this.creep.moveTo(targets[0]);\n                    }\n                    this.creep.say('运输中');\n                    return true;\n                }\n                else {\n                    this.creep.say('闲置中');\n                    return false;\n                }\n            }\n        }\n    },\n    _a.type = \"harvester\" /* Harvester */,\n    _a.minEnergy = GetRequiredEnergy(['work', 'carry', 'move']),\n    _a);\n","import { Builder } from './builder';\nimport { Harvester } from './harvester';\nimport { Upgrader } from './upgrader';\nfor (const key in Memory.creeps) {\n    if (!(key in Game.creeps)) {\n        delete Memory.creeps[key];\n    }\n}\nconst creepCtorMap = {\n    harvester: Harvester,\n    upgrader: Upgrader,\n    builder: Builder,\n};\nconst creepMap = new Map();\nfor (const creepName in Game.creeps) {\n    const creep = Game.creeps[creepName];\n    const type = creep.memory.type;\n    const handler = new creepCtorMap[type]();\n    handler.creep = creep;\n    if (creepMap.has(type)) {\n        creepMap.get(type).push(handler);\n    }\n    else {\n        creepMap.set(type, [handler]);\n    }\n}\nlet spawning = null;\nconst list = [\"harvester\" /* Harvester */, \"upgrader\" /* Upgrader */, \"builder\" /* Builder */];\nfor (let i = 0; i < list.length; i++) {\n    const l = creepMap.get(list[i]);\n    if (!l) {\n        spawning = list[i];\n        break;\n    }\n}\nif (spawning === null) {\n    creepMap.forEach((creeps, type) => {\n        let flag = true;\n        for (let i = 0; i < creeps.length; i++) {\n            flag = creeps[i].ticker() && flag;\n        }\n        if (!flag) {\n            const index = list.indexOf(type);\n            if (index >= 0) {\n                list.splice(index, 1);\n            }\n        }\n    });\n    spawning = list.length > 0 ? list[Math.floor(Math.random() * list.length)] : null;\n}\nelse {\n    creepMap.forEach(creeps => creeps.forEach(creep => creep.ticker()));\n}\nfor (const spawnName in Game.spawns) {\n    const spawn = Game.spawns[spawnName];\n    if (spawning !== null) {\n        const ctor = creepCtorMap[spawning];\n        if (spawn.room.energyAvailable >= ctor.minEnergy) {\n            const creep = new ctor();\n            const reuslt = creep.create(spawn, spawn.room.energyAvailable);\n            if (reuslt !== OK) {\n                console.log(reuslt);\n            }\n        }\n    }\n}\nGame.killAllCreeps = () => {\n    for (const name in Game.creeps) {\n        Game.creeps[name].suicide();\n        delete Memory.creeps[name];\n    }\n};\n","var _a;\nimport { GetRequiredEnergy } from './baseCreep';\nexport const Upgrader = (_a = class Upgrader {\n        create(spawn) {\n            const name = `${Upgrader.type}-${Game.time}`;\n            const result = spawn.spawnCreep(['work', 'carry', 'move'], name);\n            if (result === OK) {\n                this.creep = Game.creeps[name];\n                this.creep.memory = {\n                    type: \"upgrader\" /* Upgrader */,\n                    upgrading: false,\n                    targetId: null,\n                };\n            }\n            return result;\n        }\n        ticker() {\n            if (this.creep.memory.upgrading) {\n                if (this.creep.store[RESOURCE_ENERGY] === 0) {\n                    this.creep.memory.upgrading = false;\n                }\n            }\n            else {\n                if (this.creep.store.getFreeCapacity() === 0) {\n                    this.creep.memory.upgrading = true;\n                }\n            }\n            if (this.creep.memory.upgrading) {\n                if (this.creep.upgradeController(this.creep.room.controller) === ERR_NOT_IN_RANGE) {\n                    this.creep.moveTo(this.creep.room.controller);\n                }\n                this.creep.say('升级中');\n                return true;\n            }\n            else {\n                let target = null;\n                if (this.creep.memory.targetId) {\n                    target = Game.getObjectById(this.creep.memory.targetId);\n                }\n                if (target === null) {\n                    const source = this.creep.room.find(FIND_SOURCES);\n                    if (source.length > 0) {\n                        target = source[Math.floor(Math.random() * source.length)];\n                        this.creep.memory.targetId = target.id;\n                    }\n                }\n                if (target) {\n                    if (this.creep.harvest(target) === ERR_NOT_IN_RANGE) {\n                        this.creep.moveTo(target);\n                    }\n                    this.creep.say('采矿中');\n                    return true;\n                }\n                else {\n                    this.creep.say('闲置中');\n                    return false;\n                }\n            }\n        }\n    },\n    _a.type = \"upgrader\" /* Upgrader */,\n    _a.minEnergy = GetRequiredEnergy(['work', 'carry', 'move']),\n    _a);\n"],"sourceRoot":""}